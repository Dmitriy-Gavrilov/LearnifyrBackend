"""create main tables

Revision ID: 78bd963acf32
Revises: 
Create Date: 2025-10-11 20:09:49.903239

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '78bd963acf32'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('students',
    sa.Column('telegram_id', sa.Integer(), nullable=False, comment='ID в Telegram'),
    sa.Column('telegram_username', sa.String(length=50), nullable=False, comment='Username в Telegram'),
    sa.Column('surname', sa.String(length=50), nullable=False, comment='Фамилия'),
    sa.Column('name', sa.String(length=50), nullable=False, comment='Имя'),
    sa.Column('patronymic', sa.String(length=50), nullable=True, comment='Отчество'),
    sa.Column('age', sa.Integer(), nullable=False, comment='Возраст'),
    sa.Column('bio', sa.String(length=200), nullable=True, comment='Описание профиля'),
    sa.Column('active', sa.Boolean(), nullable=False, comment='Активность'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Удален или нет'),
    sa.Column('request_notification', sa.Boolean(), nullable=False, comment='Уведомления об откликах'),
    sa.Column('review_published_notification', sa.Boolean(), nullable=False, comment='Уведомления об опубликованных отзывах'),
    sa.Column('archive_lessons_notification', sa.Boolean(), nullable=False, comment='Уведомления о завершении уроков'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subjects',
    sa.Column('name', sa.String(length=50), nullable=False, comment='Название предмета'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teachers',
    sa.Column('telegram_id', sa.Integer(), nullable=False, comment='ID в Telegram'),
    sa.Column('telegram_username', sa.String(length=50), nullable=False, comment='Username в Telegram'),
    sa.Column('surname', sa.String(length=50), nullable=False, comment='Фамилия'),
    sa.Column('name', sa.String(length=50), nullable=False, comment='Имя'),
    sa.Column('patronymic', sa.String(length=50), nullable=True, comment='Отчество'),
    sa.Column('age', sa.Integer(), nullable=False, comment='Возраст'),
    sa.Column('bio', sa.String(length=200), nullable=True, comment='Описание профиля'),
    sa.Column('avatar_url', sa.String(length=100), nullable=True, comment='URL аватара'),
    sa.Column('rate', sa.Integer(), nullable=True, comment='Ставка за час'),
    sa.Column('rating', sa.Numeric(precision=2, scale=1), nullable=False, comment='Рейтинг'),
    sa.Column('active', sa.Boolean(), nullable=False, comment='Активность'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Удален или нет'),
    sa.Column('review_notification', sa.Boolean(), nullable=False, comment='Уведомления об отзывах'),
    sa.Column('response_notification', sa.Boolean(), nullable=False, comment='Уведомления о принятии откликов'),
    sa.Column('archive_lessons_notification', sa.Boolean(), nullable=False, comment='Уведомления о завершении уроков'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tokens',
    sa.Column('value', sa.String(length=64), nullable=False, comment='Токен'),
    sa.Column('type', sa.Enum('REGISTRATION', 'CONFIRMATION', name='tokentype', native_enum=False), nullable=False, comment='Тип токена'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='Время истечения'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('applications',
    sa.Column('student_id', sa.Integer(), nullable=False, comment='ID студента'),
    sa.Column('subject_id', sa.Integer(), nullable=False, comment='ID предмета'),
    sa.Column('price', sa.Integer(), nullable=False, comment='Цена за час'),
    sa.Column('lessons_count', sa.Enum('FEW', 'MEDIUM', 'MANY', name='lessonscount', native_enum=False), nullable=False, comment='Преподполагаемое количество уроков'),
    sa.Column('description', sa.String(length=200), nullable=False, comment='Описание'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Дата создания'),
    sa.Column('status', sa.Enum('ACTIVE', 'ACCEPTED', 'ARCHIVED', name='applicationstatus', native_enum=False), nullable=False, comment='Статус заявки'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ondelete='NO ACTION'),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ondelete='NO ACTION'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('hidden_teachers',
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),
    sa.PrimaryKeyConstraint('student_id', 'teacher_id')
    )
    op.create_table('reviews',
    sa.Column('student_id', sa.Integer(), nullable=False, comment='ID студента, оставившего отзыв'),
    sa.Column('teacher_id', sa.Integer(), nullable=False, comment='ID репетитора, которому оставлен отзыв'),
    sa.Column('rating', sa.Integer(), nullable=False, comment='Оценка'),
    sa.Column('text', sa.String(length=100), nullable=False, comment='Текст отзыва'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Дата создания'),
    sa.Column('is_published', sa.Boolean(), nullable=False, comment='Опубликован или нет'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ondelete='NO ACTION'),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teacher_subjects',
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),
    sa.PrimaryKeyConstraint('teacher_id', 'subject_id')
    )
    op.create_table('hidden_applications',
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('application_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('student_id', 'application_id')
    )
    op.create_table('matchs',
    sa.Column('student_id', sa.Integer(), nullable=False, comment='ID студента'),
    sa.Column('teacher_id', sa.Integer(), nullable=False, comment='ID репетитора'),
    sa.Column('application_id', sa.Integer(), nullable=False, comment='ID заявки'),
    sa.Column('status', sa.Enum('REQUEST', 'ACTIVE', 'ARCHIVED', name='matchstatus', native_enum=False), nullable=False, comment='Статус'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ondelete='NO ACTION'),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ondelete='NO ACTION'),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ondelete='NO ACTION'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('matchs')
    op.drop_table('hidden_applications')
    op.drop_table('teacher_subjects')
    op.drop_table('reviews')
    op.drop_table('hidden_teachers')
    op.drop_table('applications')
    op.drop_table('tokens')
    op.drop_table('teachers')
    op.drop_table('subjects')
    op.drop_table('students')
    # ### end Alembic commands ###
